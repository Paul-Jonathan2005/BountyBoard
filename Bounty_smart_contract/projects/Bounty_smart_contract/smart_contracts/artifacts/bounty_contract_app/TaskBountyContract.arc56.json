{
    "name": "TaskBountyContract",
    "structs": {
        "DisputeData": [
            {
                "name": "freelancer_votes",
                "type": "uint64"
            },
            {
                "name": "company_votes",
                "type": "uint64"
            },
            {
                "name": "is_open",
                "type": "bool"
            },
            {
                "name": "voters",
                "type": "address[]"
            },
            {
                "name": "reward",
                "type": "uint64"
            }
        ],
        "TaskData": [
            {
                "name": "company",
                "type": "address"
            },
            {
                "name": "freelancer",
                "type": "address"
            },
            {
                "name": "reward",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_task",
            "args": [
                {
                    "type": "pay",
                    "name": "payment_txn"
                },
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "address",
                    "name": "company"
                },
                {
                    "type": "address",
                    "name": "freelancer"
                },
                {
                    "type": "uint64",
                    "name": "reward"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "release_reward",
            "args": [
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "start_appeal",
            "args": [
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cast_vote",
            "args": [
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "bool",
                    "name": "vote_for_freelancer"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resolve_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "task_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_voting_reward",
            "args": [
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map_struct": {
                    "keyType": "uint64",
                    "valueType": "TaskData",
                    "prefix": "dXNlcnM="
                },
                "dispute_box": {
                    "keyType": "uint64",
                    "valueType": "DisputeData",
                    "prefix": "ZGlzcHV0ZXM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        499
                    ],
                    "errorMessage": "Already voted"
                },
                {
                    "pc": [
                        292,
                        304,
                        344,
                        355,
                        378,
                        486,
                        571,
                        730,
                        762,
                        837
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        849
                    ],
                    "errorMessage": "Not a voter"
                },
                {
                    "pc": [
                        91,
                        114,
                        134,
                        155,
                        173,
                        196
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        298
                    ],
                    "errorMessage": "Only company can release"
                },
                {
                    "pc": [
                        235
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        94,
                        117,
                        137,
                        158,
                        176,
                        199
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        290,
                        343,
                        671
                    ],
                    "errorMessage": "check self.box_map_struct entry exists"
                },
                {
                    "pc": [
                        438,
                        678,
                        800
                    ],
                    "errorMessage": "check self.dispute_box entry exists"
                },
                {
                    "pc": [
                        209
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEggAEmBAEABXVzZXJzCGRpc3B1dGVzBBUffHUxG0EAvoIGBApU8sME0sSyYwQhnU5/BM65L1EEKYlesAToL4QuNhoAjgYAawBUAEIALQAZAAIiQzEZFEQxGEQ2GgE2GgKIAqoWK0xQsCNDMRkURDEYRDYaAYgCGhYrTFCwI0MxGRREMRhENhoBNhoCNhoDiAENI0MxGRREMRhENhoBNhoCiACjI0MxGRREMRhENhoBNhoCiABfFitMULAjQzEZFEQxGEQxFiMJSTgQIxJENhoBNhoCNhoDNhoEiAANI0MxGUD/bjEYFEQjQ4oFAIv7OAcyChJEi/s4CIv/FxJEi/s4AIv9EkSL/Yv+UIv/UCmL/FBMv4mKAgEpi/5QSb5ESVcAIIv/EkSxMgpLAVcgIE8CgUBbsgiyB7IAI7IQIrIBs7QITLxIiYoCACmL/lC+TElPAkRXACCL/xJAAAuLAFcgIIv/EkEAMyNEKov+UEm9RQEURIsAV0AIgBMAAAAAAAAAAAAAAAAAAAAAgAAbTFCAAgAAUEsBvEi/iSJC/8qKAwAiSYAARwMqi/1QSb5MSU8CREklUygiTwJUKBNEIkxJgRFZSwEVUkkiWSKLC4sKDIsIjANBABSLCVcCAIsLJAskWIv/EkEAoCOMA4sDFESL/igTQQCCiwdJIlsjCBZcAIwHIowIiwdJgRFZSU4CjAVJFUxOAlJJjAEiWYwCIowEiwSLAgyLCIwDQQAUiwFXAgCLBCQLJFiL/xJBADIjjAOLA4sHjABAAByLAVcCAIv/UEkVJAoWVwYCTFCLByKLBVhMUIwAiwCLBkm8SEy/iYsEIwiMBEL/qIsHSYEIWyMIFlwIjAdC/3qLCyMIjAtC/zqKAQEpi/9QSb5EKov/UEm+REklUygiTwJUKBNEJSJUSwG8SExLAb9JgRNbSYEKChYXCRZOAkkiW0yBCFsMQQAgsTIKTFcgIIsBF7IIsgeyACOyECKyAbO0CIsAvEiMAImxMgpMVwAgiwEXsgiyB7IAI7IQIrIBs7QIQv/digIBgAAqi/5QvkxJTwJESYERWUsBFVJJIkwiWSKLBYsEDIsDjABBABSLAlcCAIsFJAskWIv/EkEALSOMAIsARIsBgRNbgQoKFheLBAoWsTIKTBeyCIv/sgeyACOyECKyAbO0CIwAiYsFIwiMBUL/rQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
{
    "name": "TaskBountyContract",
    "structs": {
        "TaskData": [
            {
                "name": "company",
                "type": "address"
            },
            {
                "name": "freelancer",
                "type": "address"
            },
            {
                "name": "reward",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_task",
            "args": [
                {
                    "type": "pay",
                    "name": "payment_txn"
                },
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "address",
                    "name": "company"
                },
                {
                    "type": "address",
                    "name": "freelancer"
                },
                {
                    "type": "uint64",
                    "name": "reward"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "release_reward",
            "args": [
                {
                    "type": "uint64",
                    "name": "task_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map_struct": {
                    "keyType": "uint64",
                    "valueType": "TaskData",
                    "prefix": "dXNlcnM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        168,
                        180
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        44,
                        72
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        174
                    ],
                    "errorMessage": "Only company can release"
                },
                {
                    "pc": [
                        111
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        47,
                        75
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        166
                    ],
                    "errorMessage": "check self.box_map_struct entry exists"
                },
                {
                    "pc": [
                        85
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmAQV1c2VyczEbQQBVggIEClTywwTSxLJjNhoAjgIAHgACI0MxGRREMRhENhoBNhoCiABkFoAEFR98dUxQsCJDMRkURDEYRDEWIglJOBAiEkQ2GgE2GgI2GgM2GgSIAA0iQzEZQP+7MRgURCJDigUAi/s4BzIKEkSL+zgIi/8XEkSL+zgAi/0SRIv9i/5Qi/9QKIv8UEy/iYoCASiL/lBJvkRJVwAgi/8SRLEyCksBVyAgTwKBQFuyCLIHsgAishAjsgGztAhMvEiJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
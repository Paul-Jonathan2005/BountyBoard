#pragma version 10
#pragma typetrack false

// smart_contracts.bounty_contract_app.contract.TaskBountyContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 32 128
    bytecblock 0x00 "users" "disputes" 0x151f7c75
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x0a54f2c3 0xd2c4b263 0x219d4e7f 0xceb92f51 0x29895eb0 0xe82f842e // method "create_task(pay,uint64,address,address,uint64)void", method "release_reward(uint64,address)uint64", method "start_appeal(uint64,address)void", method "cast_vote(uint64,bool,address)void", method "resolve_dispute(uint64)uint64", method "claim_voting_reward(uint64,address)uint64"
    txna ApplicationArgs 0
    match main_create_task_route@5 main_release_reward_route@6 main_start_appeal_route@7 main_cast_vote_route@8 main_resolve_dispute_route@9 main_claim_voting_reward_route@10

main_after_if_else@13:
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    intc_0 // 0
    return

main_claim_voting_reward_route@10:
    // smart_contracts/bounty_contract_app/contract.py:134
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/bounty_contract_app/contract.py:134
    // @arc4.abimethod
    callsub claim_voting_reward
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_resolve_dispute_route@9:
    // smart_contracts/bounty_contract_app/contract.py:103
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/bounty_contract_app/contract.py:103
    // @arc4.abimethod
    callsub resolve_dispute
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_cast_vote_route@8:
    // smart_contracts/bounty_contract_app/contract.py:76
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/bounty_contract_app/contract.py:76
    // @arc4.abimethod
    callsub cast_vote
    intc_1 // 1
    return

main_start_appeal_route@7:
    // smart_contracts/bounty_contract_app/contract.py:63
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/bounty_contract_app/contract.py:63
    // @arc4.abimethod
    callsub start_appeal
    intc_1 // 1
    return

main_release_reward_route@6:
    // smart_contracts/bounty_contract_app/contract.py:46
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/bounty_contract_app/contract.py:46
    // @arc4.abimethod
    callsub release_reward
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_task_route@5:
    // smart_contracts/bounty_contract_app/contract.py:25
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/bounty_contract_app/contract.py:25
    // @arc4.abimethod
    callsub create_task
    intc_1 // 1
    return

main_bare_routing@11:
    // smart_contracts/bounty_contract_app/contract.py:19
    // class TaskBountyContract(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.bounty_contract_app.contract.TaskBountyContract.create_task(payment_txn: uint64, task_id: bytes, company: bytes, freelancer: bytes, reward: bytes) -> void:
create_task:
    // smart_contracts/bounty_contract_app/contract.py:25-33
    // @arc4.abimethod
    // def create_task(
    //     self,
    //     payment_txn: gtxn.PaymentTransaction,
    //     task_id: arc4.UInt64,
    //     company: arc4.Address,
    //     freelancer: arc4.Address,
    //     reward: arc4.UInt64,
    // ) -> None:
    proto 5 0
    // smart_contracts/bounty_contract_app/contract.py:34
    // assert payment_txn.receiver == Global.current_application_address
    frame_dig -5
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/bounty_contract_app/contract.py:35
    // assert payment_txn.amount == reward.native
    frame_dig -5
    gtxns Amount
    frame_dig -1
    btoi
    ==
    assert
    // smart_contracts/bounty_contract_app/contract.py:36
    // assert payment_txn.sender == company.native
    frame_dig -5
    gtxns Sender
    frame_dig -3
    ==
    assert
    // smart_contracts/bounty_contract_app/contract.py:38-43
    // # Save task data in a box
    // task_data = TaskData(
    //     company=company,
    //     freelancer=freelancer,
    //     reward=reward,
    // )
    frame_dig -3
    frame_dig -2
    concat
    frame_dig -1
    concat
    // smart_contracts/bounty_contract_app/contract.py:44
    // self.box_map_struct[task_id] = task_data
    bytec_1 // "users"
    frame_dig -4
    concat
    swap
    box_put
    retsub


// smart_contracts.bounty_contract_app.contract.TaskBountyContract.release_reward(task_id: bytes, caller: bytes) -> uint64:
release_reward:
    // smart_contracts/bounty_contract_app/contract.py:46-47
    // @arc4.abimethod
    // def release_reward(self, task_id: arc4.UInt64, caller: arc4.Address) -> UInt64:
    proto 2 1
    // smart_contracts/bounty_contract_app/contract.py:48
    // task_data = self.box_map_struct[task_id]
    bytec_1 // "users"
    frame_dig -2
    concat
    dup
    box_get
    assert // check self.box_map_struct entry exists
    // smart_contracts/bounty_contract_app/contract.py:49
    // assert caller == task_data.company, "Only company can release"
    dup
    extract 0 32 // on error: Index access is out of bounds
    frame_dig -1
    ==
    assert // Only company can release
    // smart_contracts/bounty_contract_app/contract.py:51-56
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=task_data.freelancer.native,
    //     amount=task_data.reward.native,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/bounty_contract_app/contract.py:52
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/bounty_contract_app/contract.py:53
    // receiver=task_data.freelancer.native,
    dig 1
    extract 32 32 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:54
    // amount=task_data.reward.native,
    uncover 2
    pushint 64 // 64
    extract_uint64
    itxn_field Amount
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/bounty_contract_app/contract.py:51
    // result = itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/bounty_contract_app/contract.py:55
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/bounty_contract_app/contract.py:51-56
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=task_data.freelancer.native,
    //     amount=task_data.reward.native,
    //     fee=0,
    // ).submit()
    itxn_submit
    itxn Amount
    // smart_contracts/bounty_contract_app/contract.py:58-59
    // # Optionally delete the task box
    // del self.box_map_struct[task_id]
    swap
    box_del
    pop
    // smart_contracts/bounty_contract_app/contract.py:61
    // return result.amount
    retsub


// smart_contracts.bounty_contract_app.contract.TaskBountyContract.start_appeal(task_id: bytes, caller: bytes) -> void:
start_appeal:
    // smart_contracts/bounty_contract_app/contract.py:63-64
    // @arc4.abimethod
    // def start_appeal(self, task_id: arc4.UInt64, caller: arc4.Address) -> None:
    proto 2 0
    // smart_contracts/bounty_contract_app/contract.py:65
    // task_data = self.box_map_struct[task_id]
    bytec_1 // "users"
    frame_dig -2
    concat
    box_get
    swap
    dup
    uncover 2
    assert // check self.box_map_struct entry exists
    // smart_contracts/bounty_contract_app/contract.py:66
    // assert caller == task_data.company or caller == task_data.freelancer
    extract 0 32 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bnz start_appeal_bool_true@2
    frame_dig 0
    extract 32 32 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz start_appeal_bool_false@3

start_appeal_bool_true@2:
    intc_1 // 1

start_appeal_bool_merge@4:
    // smart_contracts/bounty_contract_app/contract.py:66
    // assert caller == task_data.company or caller == task_data.freelancer
    assert
    // smart_contracts/bounty_contract_app/contract.py:67
    // assert task_id not in self.dispute_box
    bytec_2 // "disputes"
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    !
    assert
    // smart_contracts/bounty_contract_app/contract.py:73
    // reward=task_data.reward
    frame_dig 0
    extract 64 8 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:68-74
    // self.dispute_box[task_id] = DisputeData(
    //     freelancer_votes=arc4.UInt64(0),
    //     company_votes=arc4.UInt64(0),
    //     is_open=arc4.Bool(True),
    //     voters=arc4.DynamicArray[arc4.Address](),
    //     reward=task_data.reward
    // )
    pushbytes 0x0000000000000000000000000000000080001b
    swap
    concat
    // smart_contracts/bounty_contract_app/contract.py:72
    // voters=arc4.DynamicArray[arc4.Address](),
    pushbytes 0x0000
    // smart_contracts/bounty_contract_app/contract.py:68-74
    // self.dispute_box[task_id] = DisputeData(
    //     freelancer_votes=arc4.UInt64(0),
    //     company_votes=arc4.UInt64(0),
    //     is_open=arc4.Bool(True),
    //     voters=arc4.DynamicArray[arc4.Address](),
    //     reward=task_data.reward
    // )
    concat
    dig 1
    box_del
    pop
    box_put
    retsub

start_appeal_bool_false@3:
    intc_0 // 0
    b start_appeal_bool_merge@4


// smart_contracts.bounty_contract_app.contract.TaskBountyContract.cast_vote(task_id: bytes, vote_for_freelancer: bytes, caller: bytes) -> void:
cast_vote:
    // smart_contracts/bounty_contract_app/contract.py:76-77
    // @arc4.abimethod
    // def cast_vote(self, task_id: arc4.UInt64, vote_for_freelancer: arc4.Bool, caller: arc4.Address) -> None:
    proto 3 0
    intc_0 // 0
    dup
    pushbytes ""
    dupn 3
    // smart_contracts/bounty_contract_app/contract.py:78
    // dispute = self.dispute_box[task_id].copy()
    bytec_2 // "disputes"
    frame_dig -3
    concat
    dup
    box_get
    swap
    dup
    uncover 2
    assert // check self.dispute_box entry exists
    // smart_contracts/bounty_contract_app/contract.py:79
    // assert dispute.is_open
    dup
    intc_3 // 128
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    !=
    assert
    // smart_contracts/bounty_contract_app/contract.py:80-81
    // # assert caller not in dispute.voters, "Already Voted"
    // found = False
    intc_0 // 0
    swap
    // smart_contracts/bounty_contract_app/contract.py:82
    // for voter in dispute.voters:
    dup
    pushint 17 // 17
    extract_uint16
    dig 1
    len
    substring3
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0

cast_vote_for_header@1:
    // smart_contracts/bounty_contract_app/contract.py:82
    // for voter in dispute.voters:
    frame_dig 11
    frame_dig 10
    <
    frame_dig 8
    frame_bury 3
    bz cast_vote_after_for@6
    frame_dig 9
    extract 2 0
    frame_dig 11
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:83
    // if caller == voter:
    frame_dig -1
    ==
    bz cast_vote_after_if_else@4
    // smart_contracts/bounty_contract_app/contract.py:84
    // found = True
    intc_1 // 1
    frame_bury 3

cast_vote_after_for@6:
    frame_dig 3
    // smart_contracts/bounty_contract_app/contract.py:86
    // assert not found, "Already voted"
    !
    assert // Already voted
    // smart_contracts/bounty_contract_app/contract.py:88
    // if vote_for_freelancer:
    frame_dig -2
    bytec_0 // 0x00
    !=
    bz cast_vote_else_body@8
    // smart_contracts/bounty_contract_app/contract.py:89
    // dispute.freelancer_votes = arc4.UInt64(dispute.freelancer_votes.native + 1)
    frame_dig 7
    dup
    intc_0 // 0
    extract_uint64
    intc_1 // 1
    +
    itob
    replace2 0
    frame_bury 7

cast_vote_after_if_else@9:
    // smart_contracts/bounty_contract_app/contract.py:93
    // found = False
    intc_0 // 0
    frame_bury 8
    // smart_contracts/bounty_contract_app/contract.py:94
    // for voter in dispute.voters:
    frame_dig 7
    dup
    pushint 17 // 17
    extract_uint16
    dup
    cover 2
    frame_bury 5
    dup
    len
    swap
    cover 2
    substring3
    dup
    frame_bury 1
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 4

cast_vote_for_header@10:
    // smart_contracts/bounty_contract_app/contract.py:94
    // for voter in dispute.voters:
    frame_dig 4
    frame_dig 2
    <
    frame_dig 8
    frame_bury 3
    bz cast_vote_after_for@15
    frame_dig 1
    extract 2 0
    frame_dig 4
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:95
    // if caller == voter:
    frame_dig -1
    ==
    bz cast_vote_after_if_else@13
    // smart_contracts/bounty_contract_app/contract.py:96
    // found = True
    intc_1 // 1
    frame_bury 3

cast_vote_after_for@15:
    frame_dig 3
    frame_dig 7
    frame_bury 0
    // smart_contracts/bounty_contract_app/contract.py:99
    // if not found:
    bnz cast_vote_after_if_else@17
    // smart_contracts/bounty_contract_app/contract.py:100
    // dispute.voters.append(caller)
    frame_dig 1
    extract 2 0
    frame_dig -1
    concat
    dup
    len
    intc_2 // 32
    /
    itob
    extract 6 2
    swap
    concat
    frame_dig 7
    intc_0 // 0
    frame_dig 5
    extract3
    swap
    concat
    frame_bury 0

cast_vote_after_if_else@17:
    frame_dig 0
    // smart_contracts/bounty_contract_app/contract.py:101
    // self.dispute_box[task_id] = dispute.copy()
    frame_dig 6
    dup
    box_del
    pop
    swap
    box_put
    retsub

cast_vote_after_if_else@13:
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b cast_vote_for_header@10

cast_vote_else_body@8:
    // smart_contracts/bounty_contract_app/contract.py:91
    // dispute.company_votes = arc4.UInt64(dispute.company_votes.native + 1)
    frame_dig 7
    dup
    pushint 8 // 8
    extract_uint64
    intc_1 // 1
    +
    itob
    replace2 8
    frame_bury 7
    b cast_vote_after_if_else@9

cast_vote_after_if_else@4:
    frame_dig 11
    intc_1 // 1
    +
    frame_bury 11
    b cast_vote_for_header@1


// smart_contracts.bounty_contract_app.contract.TaskBountyContract.resolve_dispute(task_id: bytes) -> uint64:
resolve_dispute:
    // smart_contracts/bounty_contract_app/contract.py:103-104
    // @arc4.abimethod
    // def resolve_dispute(self, task_id: arc4.UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/bounty_contract_app/contract.py:105
    // task_data = self.box_map_struct[task_id]
    bytec_1 // "users"
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.box_map_struct entry exists
    // smart_contracts/bounty_contract_app/contract.py:106
    // dispute = self.dispute_box[task_id].copy()
    bytec_2 // "disputes"
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.dispute_box entry exists
    // smart_contracts/bounty_contract_app/contract.py:107
    // assert dispute.is_open
    dup
    intc_3 // 128
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    !=
    assert
    // smart_contracts/bounty_contract_app/contract.py:109
    // dispute.is_open = arc4.Bool(False)
    intc_3 // 128
    intc_0 // 0
    setbit
    // smart_contracts/bounty_contract_app/contract.py:110
    // self.dispute_box[task_id] = dispute.copy()
    dig 1
    box_del
    pop
    swap
    dig 1
    box_put
    // smart_contracts/bounty_contract_app/contract.py:112
    // voter_reward_pool = arc4.UInt64(dispute.reward.native // 10)
    dup
    pushint 19 // 19
    extract_uint64
    dup
    pushint 10 // 10
    /
    itob
    // smart_contracts/bounty_contract_app/contract.py:113
    // reward_to_winner = arc4.UInt64(dispute.reward.native - voter_reward_pool.native)
    btoi
    -
    itob
    cover 2
    // smart_contracts/bounty_contract_app/contract.py:115
    // if dispute.freelancer_votes.native < dispute.company_votes.native:
    dup
    intc_0 // 0
    extract_uint64
    swap
    pushint 8 // 8
    extract_uint64
    <
    bz resolve_dispute_else_body@3
    // smart_contracts/bounty_contract_app/contract.py:116-121
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=task_data.freelancer.native,
    //     amount=reward_to_winner.native,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/bounty_contract_app/contract.py:117
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/bounty_contract_app/contract.py:118
    // receiver=task_data.freelancer.native,
    swap
    extract 32 32 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:119
    // amount=reward_to_winner.native,
    frame_dig 1
    btoi
    itxn_field Amount
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/bounty_contract_app/contract.py:116
    // result = itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/bounty_contract_app/contract.py:120
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/bounty_contract_app/contract.py:116-121
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=task_data.freelancer.native,
    //     amount=reward_to_winner.native,
    //     fee=0,
    // ).submit()
    itxn_submit
    itxn Amount

resolve_dispute_after_if_else@5:
    // smart_contracts/bounty_contract_app/contract.py:130
    // del self.box_map_struct[task_id]
    frame_dig 0
    box_del
    pop
    // smart_contracts/bounty_contract_app/contract.py:132
    // return result.amount
    frame_bury 0
    retsub

resolve_dispute_else_body@3:
    // smart_contracts/bounty_contract_app/contract.py:123-128
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=task_data.company.native,
    //     amount=reward_to_winner.native,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/bounty_contract_app/contract.py:124
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/bounty_contract_app/contract.py:125
    // receiver=task_data.company.native,
    swap
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:126
    // amount=reward_to_winner.native,
    frame_dig 1
    btoi
    itxn_field Amount
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/bounty_contract_app/contract.py:123
    // result = itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/bounty_contract_app/contract.py:127
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/bounty_contract_app/contract.py:123-128
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=task_data.company.native,
    //     amount=reward_to_winner.native,
    //     fee=0,
    // ).submit()
    itxn_submit
    itxn Amount
    b resolve_dispute_after_if_else@5


// smart_contracts.bounty_contract_app.contract.TaskBountyContract.claim_voting_reward(task_id: bytes, caller: bytes) -> uint64:
claim_voting_reward:
    // smart_contracts/bounty_contract_app/contract.py:134-135
    // @arc4.abimethod
    // def claim_voting_reward(self, task_id: arc4.UInt64, caller: arc4.Address) -> UInt64:
    proto 2 1
    pushbytes ""
    // smart_contracts/bounty_contract_app/contract.py:136
    // dispute = self.dispute_box[task_id].copy()
    bytec_2 // "disputes"
    frame_dig -2
    concat
    box_get
    swap
    dup
    uncover 2
    assert // check self.dispute_box entry exists
    // smart_contracts/bounty_contract_app/contract.py:137
    // voters = dispute.voters.copy()
    dup
    pushint 17 // 17
    extract_uint16
    dig 1
    len
    substring3
    dup
    // smart_contracts/bounty_contract_app/contract.py:138-139
    // # assert caller in voters, "Not a voter"
    // found = False
    intc_0 // 0
    swap
    // smart_contracts/bounty_contract_app/contract.py:140
    // for voter in voters:
    intc_0 // 0
    extract_uint16
    intc_0 // 0

claim_voting_reward_for_header@1:
    // smart_contracts/bounty_contract_app/contract.py:140
    // for voter in voters:
    frame_dig 5
    frame_dig 4
    <
    frame_dig 3
    frame_bury 0
    bz claim_voting_reward_after_for@6
    frame_dig 2
    extract 2 0
    frame_dig 5
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    // smart_contracts/bounty_contract_app/contract.py:141
    // if caller == voter:
    frame_dig -1
    ==
    bz claim_voting_reward_after_if_else@4
    // smart_contracts/bounty_contract_app/contract.py:142
    // found = True
    intc_1 // 1
    frame_bury 0

claim_voting_reward_after_for@6:
    frame_dig 0
    // smart_contracts/bounty_contract_app/contract.py:144
    // assert found, "Not a voter"
    assert // Not a voter
    // smart_contracts/bounty_contract_app/contract.py:146
    // total_reward = arc4.UInt64(dispute.reward.native // 10)
    frame_dig 1
    pushint 19 // 19
    extract_uint64
    pushint 10 // 10
    /
    itob
    // smart_contracts/bounty_contract_app/contract.py:147
    // share = arc4.UInt64(total_reward.native // voters.length)
    btoi
    frame_dig 4
    /
    itob
    // smart_contracts/bounty_contract_app/contract.py:149-154
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=caller.native,
    //     amount=share.native,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/bounty_contract_app/contract.py:150
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/bounty_contract_app/contract.py:152
    // amount=share.native,
    swap
    btoi
    itxn_field Amount
    frame_dig -1
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/bounty_contract_app/contract.py:149
    // result = itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/bounty_contract_app/contract.py:153
    // fee=0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/bounty_contract_app/contract.py:149-154
    // result = itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=caller.native,
    //     amount=share.native,
    //     fee=0
    // ).submit()
    itxn_submit
    itxn Amount
    // smart_contracts/bounty_contract_app/contract.py:156
    // return result.amount
    frame_bury 0
    retsub

claim_voting_reward_after_if_else@4:
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b claim_voting_reward_for_header@1
